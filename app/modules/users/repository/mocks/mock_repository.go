// Code generated by MockGen. DO NOT EDIT.
// Source: app/modules/users/repository/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/vkhoa145/facebook-mini-api/app/models"
	gorm "gorm.io/gorm"
)

// MockUserRepoInterface is a mock of UserRepoInterface interface.
type MockUserRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoInterfaceMockRecorder
}

// MockUserRepoInterfaceMockRecorder is the mock recorder for MockUserRepoInterface.
type MockUserRepoInterfaceMockRecorder struct {
	mock *MockUserRepoInterface
}

// NewMockUserRepoInterface creates a new mock instance.
func NewMockUserRepoInterface(ctrl *gomock.Controller) *MockUserRepoInterface {
	mock := &MockUserRepoInterface{ctrl: ctrl}
	mock.recorder = &MockUserRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepoInterface) EXPECT() *MockUserRepoInterfaceMockRecorder {
	return m.recorder
}

// CheckExistedEmail mocks base method.
func (m *MockUserRepoInterface) CheckExistedEmail(email string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExistedEmail", email)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckExistedEmail indicates an expected call of CheckExistedEmail.
func (mr *MockUserRepoInterfaceMockRecorder) CheckExistedEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExistedEmail", reflect.TypeOf((*MockUserRepoInterface)(nil).CheckExistedEmail), email)
}

// CreateLoginToken mocks base method.
func (m *MockUserRepoInterface) CreateLoginToken(jwt *models.LoginToken, tx *gorm.DB) (*models.LoginToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoginToken", jwt, tx)
	ret0, _ := ret[0].(*models.LoginToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoginToken indicates an expected call of CreateLoginToken.
func (mr *MockUserRepoInterfaceMockRecorder) CreateLoginToken(jwt, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoginToken", reflect.TypeOf((*MockUserRepoInterface)(nil).CreateLoginToken), jwt, tx)
}

// CreateUser mocks base method.
func (m *MockUserRepoInterface) CreateUser(payload *models.User, tx *gorm.DB) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", payload, tx)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepoInterfaceMockRecorder) CreateUser(payload, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepoInterface)(nil).CreateUser), payload, tx)
}
